{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import\"./App.css\";import{MenuItem,FormControl,Select,Card,CardContent}from\"@material-ui/core\";import InfoBox from\"./InfoBox\";import LineGraph from\"./LineGraph\";import Table from\"./Table\";import{sortData,prettyPrintStat}from\"./util\";import numeral from\"numeral\";import Map from\"./Map\";import\"leaflet/dist/leaflet.css\";const App=()=>{const[country,setInputCountry]=useState(\"worldwide\");const[countryInfo,setCountryInfo]=useState({});const[countries,setCountries]=useState([]);const[mapCountries,setMapCountries]=useState([]);const[tableData,setTableData]=useState([]);const[casesType,setCasesType]=useState(\"cases\");const[mapCenter,setMapCenter]=useState({lat:34.80746,lng:-40.4796});const[mapZoom,setMapZoom]=useState(3);useEffect(()=>{fetch(\"https://disease.sh/v3/covid-19/all\").then(response=>response.json()).then(data=>{setCountryInfo(data);});},[]);useEffect(()=>{const getCountriesData=async()=>{fetch(\"https://disease.sh/v3/covid-19/countries\").then(response=>response.json()).then(data=>{const countries=data.map(country=>({name:country.country,value:country.countryInfo.iso2}));let sortedData=sortData(data);setCountries(countries);setMapCountries(data);setTableData(sortedData);});};getCountriesData();},[]);console.log(casesType);const onCountryChange=async e=>{const countryCode=e.target.value;const url=countryCode===\"worldwide\"?\"https://disease.sh/v3/covid-19/all\":\"https://disease.sh/v3/covid-19/countries/\".concat(countryCode);await fetch(url).then(response=>response.json()).then(data=>{setInputCountry(countryCode);setCountryInfo(data);setMapCenter([data.countryInfo.lat,data.countryInfo.long]);setMapZoom(4);});};return/*#__PURE__*/React.createElement(\"div\",{className:\"app\"},/*#__PURE__*/React.createElement(\"div\",{className:\"app__left\"},/*#__PURE__*/React.createElement(\"div\",{className:\"app__header\"},/*#__PURE__*/React.createElement(\"h1\",null,\"COVID-19 Tracker\"),/*#__PURE__*/React.createElement(FormControl,{className:\"app__dropdown\"},/*#__PURE__*/React.createElement(Select,{variant:\"outlined\",value:country,onChange:onCountryChange},/*#__PURE__*/React.createElement(MenuItem,{value:\"worldwide\"},\"Worldwide\"),countries.map(country=>/*#__PURE__*/React.createElement(MenuItem,{value:country.value},country.name))))),/*#__PURE__*/React.createElement(\"div\",{className:\"app__stats\"},/*#__PURE__*/React.createElement(InfoBox,{onClick:e=>setCasesType(\"cases\"),title:\"Coronavirus Cases\",isRed:true,active:casesType===\"cases\",cases:prettyPrintStat(countryInfo.todayCases),total:numeral(countryInfo.cases).format(\"0.0a\")}),/*#__PURE__*/React.createElement(InfoBox,{onClick:e=>setCasesType(\"recovered\"),title:\"Recovered\",active:casesType===\"recovered\",cases:prettyPrintStat(countryInfo.todayRecovered),total:numeral(countryInfo.recovered).format(\"0.0a\")}),/*#__PURE__*/React.createElement(InfoBox,{onClick:e=>setCasesType(\"deaths\"),title:\"Deaths\",isRed:true,active:casesType===\"deaths\",cases:prettyPrintStat(countryInfo.todayDeaths),total:numeral(countryInfo.deaths).format(\"0.0a\")})),/*#__PURE__*/React.createElement(Map,{countries:mapCountries,casesType:casesType,center:mapCenter,zoom:mapZoom})),/*#__PURE__*/React.createElement(Card,{className:\"app__right\"},/*#__PURE__*/React.createElement(CardContent,null,/*#__PURE__*/React.createElement(\"div\",{className:\"app__information\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Live Cases by Country\"),/*#__PURE__*/React.createElement(Table,{countries:tableData}),/*#__PURE__*/React.createElement(\"h3\",null,\"Worldwide new \",casesType),/*#__PURE__*/React.createElement(LineGraph,{casesType:casesType})))));};export default App;","map":{"version":3,"names":["React","useState","useEffect","MenuItem","FormControl","Select","Card","CardContent","InfoBox","LineGraph","Table","sortData","prettyPrintStat","numeral","Map","App","country","setInputCountry","countryInfo","setCountryInfo","countries","setCountries","mapCountries","setMapCountries","tableData","setTableData","casesType","setCasesType","mapCenter","setMapCenter","lat","lng","mapZoom","setMapZoom","fetch","then","response","json","data","getCountriesData","map","name","value","iso2","sortedData","console","log","onCountryChange","e","countryCode","target","url","concat","long","createElement","className","variant","onChange","onClick","title","isRed","active","cases","todayCases","total","format","todayRecovered","recovered","todayDeaths","deaths","center","zoom"],"sources":["/Users/gangadgaryadav/covid-19-tracker/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}